{"version":3,"sources":["../node_modules/@material-ui/icons/ChevronLeft.js","views/auth/forget-password/index.js","component/Page.js","../node_modules/@material-ui/core/esm/Link/Link.js","../node_modules/@material-ui/icons/MailOutline.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","useStyles","makeStyles","theme","get","alignItems","textAlign","marginTop","marginBottom","loginBox","padding","donation","fontSize","cursor","backgroundColor","borderRadius","Forgetassword","props","classes","history","useHistory","useState","isLoading","setIsLoading","errorMessage","setErrorMesage","endTime","setEndtime","verifyOTPOpen","setVerifyOTPOpen","emailOtp","setEmail","errorMessageresend","setErrorMesageResend","mobileNumber","setMobileNumber","isLoadingresend","setIsLoadingResend","isloading","timeLeft","setTimeLeft","checked1","setChecked1","checked2","setChecked2","isSubmit","setIsSubmit","console","log","countryCode","setCountryCode","email","formValue","formInitialSchema","isValidNumber","test","formValidationSchema","yup","shape","required","matches","verifyOTP","values","axios","method","url","ApiConfig","verifyOtp","data","otp","res","responseCode","setTimeout","responseMessage","toast","success","localStorage","setItem","result","push","response","resendOTP","resendOtp","moment","add","unix","formValidationSchemaOtp","max","useEffect","timer","calculateTimeLeft","clearTimeout","title","maxWidth","mt","mb","variant","style","color","className","elevation","item","xs","marginRight","onClick","initialValues","initialStatus","successMsg","validationSchema","onSubmit","forgotPassword","slice","length","window","sessionStorage","errors","handleBlur","handleChange","touched","handleSubmit","isSubmitting","container","direction","spacing","fullWidth","type","size","name","placeholder","error","Boolean","String","toLowerCase","onBlur","onChange","InputProps","startAdornment","position","country","phone","e","dialCode","inputStyle","width","height","border","ml","fontWeight","disabled","component","RouterComponent","to","display","justifyContent","textDecoration","open","DateOfBirth","maxLength","onKeyPress","event","key","preventDefault","seconds","minutes","align","Page","children","Link","ref","_props$color","_props$component","onFocus","TypographyClasses","_props$underline","underline","_props$variant","other","_objectWithoutProperties","_useIsFocusVisible","useIsFocusVisible","isFocusVisible","onBlurVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","useForkRef","Typography","_extends","clsx","root","concat","capitalize","button","withStyles","underlineNone","underlineHover","underlineAlways","WebkitTapHighlightColor","outline","margin","userSelect","verticalAlign","borderStyle"],"mappings":"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","file":"static/js/45.9ae763d2.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"\n}), 'ChevronLeft');\n\nexports.default = _default;","import React, { useState, useEffect } from \"react\";\r\nimport \"src/scss/main.css\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport {\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  Paper,\r\n  TextField,\r\n  Link,\r\n  makeStyles,\r\n  Grid,\r\n  Container,\r\n  FormControl,\r\n  FormHelperText,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport * as yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport Page from \"src/component/Page\";\r\nimport { toast } from \"react-toastify\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport ApiConfig from \"src/ApiConfig/ApiConfig\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport { Formik, ErrorMessage, Form, useFormik } from \"formik\";\r\nimport { useHistory, Link as RouterComponent } from \"react-router-dom\";\r\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\r\nimport { calculateTimeLeft, tokenName } from \"src/utils\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  get: {\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    marginTop: \"5rem\",\r\n    marginBottom: \"1rem\",\r\n  },\r\n  loginBox: {\r\n    padding: \"40px 30px\",\r\n  },\r\n  donation: {\r\n    \"& span\": {\r\n      fontSize: \"12px\",\r\n      padding: \"2px 5px\",\r\n      // border: \"1px solid #e31a89\",\r\n      cursor: \"pointer\",\r\n      \"&.active\": {\r\n        backgroundColor: \"#e31a89\",\r\n        borderRadius: \"7px\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n// const initialValues = {\r\n//   email: \"\",\r\n// };\r\n\r\n// const validationSchema = yup.object({\r\n//   email: yup.string().email().required(\"Required\"),\r\n// });\r\n\r\nfunction Forgetassword(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [isLoading, setIsLoading] = useState();\r\n  const [errorMessage, setErrorMesage] = useState(\"\");\r\n  const [endTime, setEndtime] = React.useState();\r\n  const [verifyOTPOpen, setVerifyOTPOpen] = useState(false);\r\n  const [emailOtp, setEmail] = React.useState();\r\n  const [errorMessageresend, setErrorMesageResend] = useState();\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [isLoadingresend, setIsLoadingResend] = useState(false);\r\n  const [isloading, setIsloading] = React.useState(false);\r\n  const [timeLeft, setTimeLeft] = useState();\r\n  const [checked1, setChecked1] = useState(true);\r\n  const [checked2, setChecked2] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  console.log(\"emailOtp\", emailOtp, mobileNumber);\r\n  const [countryCode, setCountryCode] = useState(\"\");\r\n  const [formValue, setFormValue] = useState({\r\n    email: \"\",\r\n  });\r\n\r\n  const formInitialSchema = {\r\n    email: \"\",\r\n    mobileNumber: \"\",\r\n  };\r\n  console.log(\"errorMessage\", errorMessage);\r\n\r\n  const isValidEmail = (value) => {\r\n    const re =\r\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line no-useless-escape\r\n    return re.test(String(value).toLowerCase());\r\n  };\r\n\r\n  const isValidNumber = (value) => {\r\n    const re =\r\n      /^(?:(?:\\+|0{0,2})91(\\s*|[\\-])?|[0]?)?([6789]\\d{2}([ -]?)\\d{3}([ -]?)\\d{4})$/;\r\n    return re.test(value);\r\n  };\r\n  const formValidationSchema = yup.object().shape(\r\n    checked1\r\n      ? {\r\n        email: yup\r\n          .string()\r\n          .email(\r\n            \"You have entered an invalid email address. Please try again\"\r\n          )\r\n          .required(\"Email address is required\")\r\n          .matches(\"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$\"),\r\n      }\r\n      : {}\r\n  );\r\n\r\n  const verifyOTP = async (values) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios({\r\n        method: \"PUT\",\r\n        url: ApiConfig.verifyOtp,\r\n        data: {\r\n          otp: values.otp,\r\n          email: emailOtp,\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n        setIsLoading(false);\r\n        setTimeout(() => {\r\n          setErrorMesageResend(\"\"); // count is 0 here\r\n        }, 5000);\r\n        setErrorMesageResend(res.data?.responseMessage);\r\n        toast.success(`${res.data.responseMessage} please login`);\r\n        localStorage.setItem(\"email\", res.data?.result.email);\r\n\r\n        history.push(\"/reset-password\");\r\n        // window.sessionStorage.setItem(\"otp\", values.otp);\r\n      }\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      // toast.error(error.message);\r\n      // toast.error(error.response.data.responseMessage);\r\n      setTimeout(() => {\r\n        setErrorMesage(\"\"); // count is 0 here\r\n      }, 5000);\r\n      setErrorMesage(error?.response?.data?.responseMessage);\r\n    }\r\n  };\r\n  const resendOTP = async () => {\r\n    setIsLoadingResend(true);\r\n    try {\r\n      const res = await axios({\r\n        method: \"POST\",\r\n        url: ApiConfig.resendOtp,\r\n        data: {\r\n          email: emailOtp,\r\n        },\r\n      });\r\n      if (res.data.responseCode === 200) {\r\n        setIsLoadingResend(false);\r\n        setEndtime(moment().add(5, \"m\").unix());\r\n        setIsLoading(false);\r\n\r\n        setTimeout(() => {\r\n          setErrorMesageResend(\"\"); // count is 0 here\r\n        }, 5000);\r\n        setErrorMesageResend(res.data?.responseMessage);\r\n        toast.success(\"resend otp succefully\");\r\n      }\r\n    } catch (error) {\r\n      setIsLoadingResend(false);\r\n      setIsLoading(false);\r\n      // toast.error(error.message);\r\n      setTimeout(() => {\r\n        setErrorMesage(\"\"); // count is 0 here\r\n      }, 5000);\r\n      setErrorMesage(error?.response?.data?.responseMessage);\r\n      // setErrorMesage(error?.response?.data?.responseMessage);\r\n    }\r\n  };\r\n  const formValidationSchemaOtp = yup.object().shape({\r\n    otp: yup\r\n      .string()\r\n      // .required(\"Otp is required\")\r\n      .max(4, \"Only four character OTP are allowed\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (verifyOTPOpen && endTime) {\r\n      const timer = setTimeout(() => {\r\n        setTimeLeft(calculateTimeLeft(endTime));\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  });\r\n  console.log(\"endTime\", endTime, timeLeft);\r\n  return (\r\n    <>\r\n      <Page title=\"Forget Password\">\r\n        <Container maxWidth=\"sm\">\r\n          <Box textAlign=\"center\" mt={5} mb={5}>\r\n            <Typography variant=\"h2\" style={{ color: \"rgb(186 184 189)\" }}>\r\n              Forgot Password?\r\n            </Typography>\r\n            <Typography variant=\"h6\" style={{ color: \"rgb(186 184 189)\" }}>\r\n              Enter your details to receive a rest link\r\n            </Typography>\r\n          </Box>\r\n          <Paper className={classes.loginBox} elevation={2}>\r\n            <Grid item xs={8} className={classes.donation}>\r\n              <Box>\r\n                <span\r\n                  style={{ fontSize: \"14px\", marginRight: \"8px\" }}\r\n                  className={checked1 ? \"active\" : null}\r\n                  onClick={() => {\r\n                    setChecked1(true);\r\n                    setChecked2(false);\r\n                    setIsSubmit(false);\r\n                  }}\r\n                >\r\n                  Email\r\n                </span>\r\n                <span\r\n                  style={{ fontSize: \"14px\", marginRight: \"8px\" }}\r\n                  className={checked2 ? \"active\" : null}\r\n                  onClick={() => {\r\n                    setChecked2(true);\r\n                    setChecked1(false);\r\n                    setIsSubmit(false);\r\n                  }}\r\n                >\r\n                  Mobile number\r\n                </span>\r\n              </Box>\r\n            </Grid>\r\n            <Box textAlign=\"center\">\r\n              <Formik\r\n                initialValues={formInitialSchema}\r\n                initialStatus={{\r\n                  success: false,\r\n                  successMsg: \"\",\r\n                }}\r\n                validationSchema={formValidationSchema}\r\n                onSubmit={async (values) => {\r\n                  setIsSubmit(true);\r\n                  if (isValidNumber(mobileNumber) || values.email !== \"\") {\r\n                    setIsLoading(true);\r\n                    try {\r\n                      const res = await axios({\r\n                        method: \"POST\",\r\n                        url: ApiConfig.forgotPassword,\r\n                        data: {\r\n                          email: checked2\r\n                            ? mobileNumber?.slice(countryCode.length)\r\n                            : values.email,\r\n                        },\r\n                      });\r\n                      if (res.data.responseCode === 200) {\r\n                        setEndtime(moment().add(5, \"m\").unix());\r\n                        setIsSubmit(false);\r\n                        setEmail(\r\n                          mobileNumber\r\n                            ? mobileNumber?.slice(countryCode.length)\r\n                            : values.email\r\n                        );\r\n                        setVerifyOTPOpen(true);\r\n                        setIsLoading(false);\r\n                        toast.success(\"Please check your email for OTP\");\r\n                        // history.push(\"/verify-otp\");\r\n                        window.sessionStorage.setItem(\"email\", values.email);\r\n                      }\r\n                    } catch (error) {\r\n                      setIsSubmit(false);\r\n\r\n                      setIsLoading(false);\r\n                      setTimeout(() => {\r\n                        setErrorMesage(\"\"); // count is 0 here\r\n                      }, 3000);\r\n                      setErrorMesage(error?.response?.data?.responseMessage);\r\n\r\n                    }\r\n                  }\r\n                }}\r\n              >\r\n                {({\r\n                  errors,\r\n                  handleBlur,\r\n                  handleChange,\r\n                  touched,\r\n                  values,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                }) => (\r\n                  <Form onSubmit={handleSubmit}>\r\n                    <Grid container direction={\"column\"} spacing={2}>\r\n                      {checked1 && (\r\n                        <Grid item>\r\n                          <FormControl fullWidth style={{ marginTop: \"30px\" }}>\r\n                            <TextField\r\n                              type=\"text\"\r\n                              variant=\"outlined\"\r\n                              size=\"small\"\r\n                              name=\"email\"\r\n                              placeholder=\"Enter your email\"\r\n                              fullWidth\r\n                              value={values.email}\r\n                              // error={Boolean(touched.email && errors.email)}\r\n                              error={Boolean(\r\n                                (isSubmit &&\r\n                                  checked1 &&\r\n                                  formValue.email === \"\") ||\r\n                                (formValue.email !== \"\" &&\r\n                                  checked1 &&\r\n                                  !isValidEmail(formValue.email))\r\n                              )}\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              InputProps={{\r\n                                startAdornment: (\r\n                                  <MailOutlineIcon position=\"start\">\r\n                                    Kg\r\n                                  </MailOutlineIcon>\r\n                                ),\r\n                              }}\r\n                            />\r\n                            <FormHelperText error>\r\n                              {touched.email && errors.email}\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n\r\n                        </Grid>\r\n                      )}\r\n                      &nbsp;\r\n                      {checked2 && (\r\n                        <Grid item>\r\n                          <FormControl\r\n                            fullWidth\r\n                            style={{ marginTop: \"12px\", marginBottom: \"16px\" }}\r\n                          >\r\n                            <PhoneInput\r\n                              country={\"in\"}\r\n                              // disabled={isEdit}\r\n                              name=\"mobileNumber\"\r\n                              value={mobileNumber}\r\n                              error={Boolean(\r\n                                (isSubmit && checked2 && !mobileNumber) ||\r\n                                (isSubmit &&\r\n                                  checked2 &&\r\n                                  !isValidNumber(mobileNumber))\r\n                              )}\r\n                              onChange={(phone, e) => {\r\n                                setCountryCode(e.dialCode);\r\n                                setMobileNumber(phone);\r\n                              }}\r\n                              inputStyle={{\r\n                                borderRadius: \"14px\",\r\n                                width: \"100%\",\r\n                                height: \"48px\",\r\n                                backgroundColor: \"rgb(36 37 38)\",\r\n                                border: \"1px solid #575758\",\r\n                              }}\r\n                            />\r\n                            <FormHelperText error>\r\n                              {(isSubmit &&\r\n                                checked2 &&\r\n                                mobileNumber === \"\" &&\r\n                                \"Mobile number is a required\") ||\r\n                                (mobileNumber !== \"\" &&\r\n                                  checked2 &&\r\n                                  !isValidNumber(mobileNumber) &&\r\n                                  \"Enter a valid mobile number\")}\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n                        </Grid>\r\n                      )}\r\n                      {errorMessage && (\r\n                        <Box\r\n                          textAlign=\"start\"\r\n                          // textAlign=\"left\"\r\n                          ml={1}\r\n                          mt={1}\r\n                          style={{ color: \"#ba1f11\", fontWeight: 600 }}\r\n                        >\r\n                          {errorMessage}\r\n                        </Box>\r\n                      )}\r\n                    </Grid>{\" \"}\r\n                    <Box mt={2} mb={3}>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        disabled={isLoading}\r\n                      // onClick={forgetPassword}\r\n                      >\r\n                        Send {isLoading && <ButtonCircularProgress />}\r\n                      </Button>\r\n                    </Box>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n\r\n              <Box>\r\n                <Link\r\n                  component={RouterComponent}\r\n                  to=\"/signup\"\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    color: \"#E31A89\",\r\n                    textDecoration: \"none\"\r\n                  }}\r\n                >\r\n                  <ChevronLeftIcon />Back to Sign Up\r\n                </Link>\r\n              </Box>\r\n            </Box>\r\n          </Paper>\r\n        </Container>\r\n\r\n        {verifyOTPOpen && (\r\n          <Dialog\r\n            fullWidth\r\n            maxWidth=\"sm\"\r\n            open={verifyOTPOpen}\r\n          // onClose={() => setVerifyOTPOpen(false)}\r\n          >\r\n            <DialogContent>\r\n              <Page title=\"Verify OTP\">\r\n                <Box textAlign=\"center\">\r\n                  <Typography variant=\"h2\">Verify OTP</Typography>\r\n                  <Box mt={2}>\r\n                    <Typography variant=\"h6\">\r\n                      Please Enter The Verification Code Send To Your Email\r\n                      Address Or Mobile Number\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box\r\n                  className=\"coin_list\"\r\n                  elevation={2}\r\n                  style={{ padding: \"25px\", textAlign: \"center\" }}\r\n                >\r\n                  <Formik\r\n                    onSubmit={(values) => verifyOTP(values)}\r\n                    // onSubmit={(values) => VerifyOtp12(values)}\r\n                    // noValidate onSubmit={handleSubmit}\r\n                    initialValues={formInitialSchema}\r\n                    validationSchema={formValidationSchemaOtp}\r\n                  >\r\n                    {({\r\n                      errors,\r\n                      handleBlur,\r\n                      handleChange,\r\n                      handleSubmit,\r\n                      touched,\r\n                      values,\r\n                      DateOfBirth,\r\n                    }) => (\r\n                      <Form>\r\n                        <Box mt={2}>\r\n                          <FormControl fullWidth>\r\n                            <OutlinedInput\r\n                              type=\"number\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"Enter your OTP\"\r\n                              size=\"small\"\r\n                              name=\"otp\"\r\n                              maxLength=\"4\"\r\n                              error={Boolean(touched.otp && errors.otp)}\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              onKeyPress={(event) => {\r\n                                if (event?.key === \"-\" || event?.key === \"+\") {\r\n                                  event.preventDefault();\r\n                                }\r\n                              }}\r\n\r\n                            />\r\n                            <FormHelperText error>\r\n                              {touched.otp && errors.otp}\r\n                            </FormHelperText>\r\n                          </FormControl>\r\n                          {errorMessage && (\r\n                            <Box\r\n                              textAlign=\"left\"\r\n                              ml={1}\r\n                              mt={1}\r\n                              style={{ color: \"#ba1f11\", fontWeight: 600 }}\r\n                            >\r\n                              {errorMessage}\r\n                            </Box>\r\n                          )}\r\n                          {errorMessageresend && (\r\n                            <Box\r\n                              textAlign=\"left\"\r\n                              ml={1}\r\n                              mt={1}\r\n                              style={{ color: \"green\", fontWeight: 600 }}\r\n                            >\r\n                              {errorMessageresend}\r\n                            </Box>\r\n                          )}\r\n                        </Box>\r\n                        {values.otp > 0 && (\r\n                          <Box mt={3}>\r\n                            <Button\r\n                              type=\"submit\"\r\n                              variant=\"contained\"\r\n                              color=\"secondary\"\r\n                              fullWidth\r\n                              size=\"large\"\r\n                              disabled={isloading || isLoading}\r\n                            >\r\n                              Verify OTP{\" \"}\r\n                              {isLoading && <ButtonCircularProgress />}\r\n                            </Button>\r\n                          </Box>\r\n                        )}\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n\r\n                  <Typography variant=\"body1\" style={{ textAlign: \"center\" }}>\r\n                    {timeLeft && timeLeft.seconds >= 0 ? (\r\n                      <>\r\n                        <Typography\r\n                          variant=\"body1\"\r\n                          style={{\r\n                            color: \"#f44336\",\r\n                            fontSize: \"13px\",\r\n                            fontWeight: 500,\r\n                            marginTop: \"10px\",\r\n                          }}\r\n\r\n                        >\r\n                          Your OTP will expire in {timeLeft?.minutes} m :{\" \"}\r\n                          {timeLeft?.seconds} s\r\n                        </Typography>{\" \"}\r\n\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        {!isloading && (\r\n                          <Box align=\"center\" mt={5}>\r\n                            <label\r\n                              style={{ cursor: \"pointer\" }}\r\n                              onClick={resendOTP}\r\n                              disabled={isLoadingresend}\r\n                            >\r\n                              Resend OTP{\" \"}\r\n                              {isLoadingresend && <ButtonCircularProgress />}\r\n                            </label>{\" \"}\r\n                            &nbsp;\r\n                          </Box>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </Typography>\r\n                </Box>\r\n              </Page>\r\n            </DialogContent>\r\n\r\n          </Dialog>\r\n        )}\r\n      </Page>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Forgetassword;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nexport default function Page(props) {\r\n  const { title, children } = props;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      <div>{children}</div>\r\n    </>\r\n  );\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z\"\n}), 'MailOutline');\n\nexports.default = _default;"],"sourceRoot":""}